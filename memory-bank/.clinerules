# Kusto MCP Server Development Rules and Patterns

## Project Patterns

### Code Organization

1. All source code lives in src/ directory
2. Maintain clear separation of concerns:
   - auth/ for authentication
   - common/ for shared utilities
   - operations/ for Kusto operations
   - types/ for TypeScript interfaces

### Naming Conventions

1. Use PascalCase for:
   - Class names
   - Interface names
   - Type aliases
2. Use camelCase for:
   - Variables
   - Functions
   - Method names
3. Use UPPER_SNAKE_CASE for:
   - Constants
   - Environment variables

### File Structure

1. One class per file
2. Group related functionality in directories
3. Index.ts files for clean exports
4. Separate interface definitions in types/

## Implementation Guidelines

### Authentication

1. Always use Azure Identity or Azure CLI
2. Handle token refresh automatically
3. Implement proper error handling

### Error Handling

1. Use custom error types from common/errors.ts
2. Include context in error messages
3. Properly categorize errors
4. Implement graceful recovery where possible

### Performance Patterns

1. Implement connection pooling
2. Optimize query execution
3. Monitor memory usage

## Development Workflow

### Code Changes

1. Update types first
2. Implement functionality
3. Add error handling
4. Write tests
5. Update documentation

### Testing Requirements

1. Unit tests for all new functionality
2. Integration tests for complex features
3. Performance testing for critical paths
4. Security testing for auth flows

## Documentation Standards

### Code Documentation

1. Use JSDoc for all public APIs
2. Include examples in documentation
3. Document error scenarios
4. Keep README up to date

### Commit Messages

1. Use conventional commit format
2. Include context where needed
3. Reference issues when applicable
4. Keep commits focused

## Tool Implementation

### New Tools

1. Define clear input schema
2. Implement comprehensive validation
3. Add detailed error handling
4. Include usage documentation

### Tool Updates

1. Maintain backward compatibility
2. Update documentation
3. Add migration guides if needed
4. Test thoroughly

## Security Practices

### Authentication

1. Never log credentials
2. Use environment variables
3. Implement proper token handling
4. Follow Azure security best practices

### Error Messages

1. Avoid exposing sensitive data
2. Provide useful but safe information
3. Log detailed errors internally
4. Present sanitized messages externally

## Performance Guidelines

### Caching

### Query Optimization

1. Validate queries before execution
2. Implement timeout handling
3. Monitor query performance

## Learning Notes

### Key Insights

1. MCP protocol standardizes AI assistant interaction
2. Azure authentication requires careful error handling

4. Clear error messages are critical for usability
5. **Data transformation is critical for response consistency**
6. **Test debugging requires systematic approach with proper logging**
7. **Response structure alignment between server and tests is essential**

### Best Practices

1. Follow TypeScript strict mode
2. Implement comprehensive error handling
3. Maintain clear documentation
4. Focus on security and performance
5. **Use safeLog for debugging instead of console.log**
6. **Enable DEBUG_SERVER=1 for test debugging**
7. **Always verify response structure matches test expectations**
8. **After major test changes, validate unit test coverage against E2E scenarios**
9. **Document coverage mapping and performance in the test README**
10. **Use recording-based mocks for all external dependencies in unit tests**

### Common Pitfalls

1. Inadequate error handling
2. Missing type definitions

4. Insufficient documentation
5. **Data structure mismatches between server responses and test expectations**
6. **Using console.log for debugging (use safeLog instead)**
7. **Not validating Kusto query syntax evolution**
8. **ðŸš¨ CRITICAL: Query-specific business logic in server layer (anti-pattern)**
9. **Hardcoded query string matching (brittle and unmaintainable)**
10. **Server layer knowing about KQL query types (violates separation of concerns)**

### Optimization Opportunities

1. Query performance tuning

3. Connection pooling
4. Error recovery mechanisms
5. **Improved data transformation patterns**
6. **Enhanced debugging methodologies**

## Test Debugging Methodology

### Successful Debugging Pattern (Proven Effective)

1. **Enable Debug Mode**: Set `DEBUG_SERVER=1` environment variable
2. **Use safeLog**: Replace console.log with safeLog for safe debugging output
3. **Examine Raw Data**: Check what Kusto actually returns vs expectations
4. **Compare Structures**: Validate response format matches test assertions
5. **Apply Transformations**: Implement data mapping from arrays to objects
6. **Verify Fixes**: Re-run tests to confirm resolution

### Critical Data Transformation Insights

1. **Kusto Response Evolution**: Raw arrays vs structured objects
2. **Column Metadata Usage**: Leverage column info for proper mapping
3. **Fallback Logic**: Implement query-specific transformations when metadata unavailable
4. **Property Name Alignment**: Ensure server properties match test expectations

### Query Syntax Learning

1. **KQL Evolution**: Prefer `tableName | getschema` over `.show table tableName columns`
2. **Response Structure**: Different queries return different data formats
3. **Compatibility**: Some syntax may not work with all Kusto environments
4. **Testing**: Always validate queries against target environment

### E2E Test Success Patterns

1. **Systematic Approach**: Debug one test at a time, understand each failure
2. **Data Structure Validation**: Always check what the server actually returns
3. **Response Consistency**: Ensure server responses match test assertion expectations
4. **Incremental Fixes**: Make targeted fixes and verify each one works
5. **Comprehensive Testing**: Run full test suites to catch regressions

## Critical Architectural Anti-Patterns (AVOID)

### ðŸš¨ Query-Specific Data Transformation in Server Layer

**NEVER DO THIS:**

```javascript
// BAD: Server layer doing query-specific transformations
if (args.query.toLowerCase().includes('count')) {
  obj.Count = row[0];
} else if (args.query.toLowerCase().includes('.show tables')) {
  obj.TableName = row[0]; obj.DatabaseName = row[1];
} else if (args.query.toLowerCase().includes('getschema')) {
  obj.ColumnName = row[0]; obj.ColumnOrdinal = row[1];
}
```

**Problems:**

1. Server should be protocol-agnostic
2. Brittle string matching
3. Hardcoded column order assumptions
4. Violates separation of concerns
5. Not extensible or maintainable

**CORRECT APPROACH:**

```javascript
// GOOD: Generic transformation using column metadata
if (columns && columns.length > 0) {
  columns.forEach((column, index) => {
    const columnName = column.ColumnName || column.name || `Column${index}`;
    obj[columnName] = row[index];
  });
} else {
  // Generic fallback only
  row.forEach((value, index) => {
    obj[`Column${index}`] = value;
  });
}
```

**Architecture Rules:**

1. Server layer = thin MCP protocol handling only
2. Operations layer = business logic and data transformation
3. Use column metadata for transformation, never query string matching
4. Keep server layer query-agnostic

### Emergency Technical Debt Warning

The current codebase contains this anti-pattern as **emergency technical debt** from test debugging. This was a quick fix to make tests pass but violates architectural principles.

**Required Action:** Move all transformation logic to operations layer before any new development.
